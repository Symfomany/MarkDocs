{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/app.ts","lib/boot.ts","lib/underscore.browser.d.ts"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import {Option} from './option';\n\n// declare let _: UnderscoreStatic;\n// import * as _ from 'underscore';\n  /**\n   * @class Markdocs\n   * @version 1.0\n   * TODO: importer underscore\n   * TODO: convertToObject return void ?\n   * TODO: user superagent\n   * TODO: user Promises\n   * TODO: use multi assignements\n   * TODO\n   */\n  export class Markdocs {\n\n\n      /**\n       * Object Showdown\n       */\n      protected showdown: any;\n\n\n      /**\n       * All default options\n       */\n      protected options: Option = {\n          mdFiles: undefined,\n          showdownOptions: {\n              tables: true\n          },\n          genericNames: {\n              container_docBody: 'markdocs-render',\n              container_docNav: 'markdocs-nav',\n              container_navGenerated: 'markdocs-nav-generated',\n              container_filesNav: 'markdocs-nav-files',\n              container_loadRender: 'markdocs-renderLoad',\n              data_btnFilesNav: 'file-name'\n          }\n      };\n\n      /**\n       * [constructor description]\n       */\n      public constructor(showdown:any, options?: Option) {\n\n      // let arr = _.countBy([1,3,5], function (item) {\n      //     return item % 2;\n      // });\n      console.log(_.range(10));\n\n        // let tab = _.map([1, 2, 3], function(num){ return num * 3; });\n        // console.log(tab);\n\n        if( typeof options.mdFiles === 'undefined' || !Array.isArray(options.mdFiles))\n          throw new Error(`mdFiles doit être un tableau...`);\n\n        this.showdown = showdown;\n        this.options = options;\n        this.loadPage(this.options.mdFiles, this.options.mdFiles[0]);\n\n      }\n\n     /**\n      * Setter option\n      */\n     set option (value:Option){\n        this.option = value;\n     }\n\n     /**\n      * Getter option\n      */\n     get option (): Option{\n       return this.options;\n     }\n\n\n\n      /**\n       * Loading page\n       * @param  {Array<string>} arrayFiles [description]\n       * @param  {[type]} filePage   [description]\n       * @return {[type]}            [description]\n       */\n      public loadPage(arrayFiles: Array<string>, filePage: string):void{\n\n        // -**- Lit le fichier md, le converti en html et envoie son contenu à la vue\n        // this.readMdFile(filePage, data => {\n        //\n        //     this.sendHtml(this.parseMdToHtml(data));\n        //\n        // });\n\n\n      }\n\n\n      /**\n       * Add text to html\n       * @param  {string} txt texte stringify\n       */\n       public sendHtml(txt:string):void{\n         document.querySelector(`#${this.options.genericNames.container_docBody}`).innerHTML = `<div id=\"${this.options.genericNames.container_loadRender}\">${txt}</div>`\n       }\n\n\n       /**\n        * Convert to html\n        * @param  {[md]} md Mardown\n        */\n       public parseMdToHtml(md:any):string{\n\n         for (let opp in this.options.showdownOptions){\n             this.showdown.setOption(opp, this.options.showdownOptions[opp]);\n         }\n         return this.showdown.makeHtml(md);\n       }\n\n       /**\n        * Remove extention from file\n        * @param  {string} file [description]\n        */\n       public static rmExtension(file: string):string{\n         return file.trim().replace(/\\..+$/, '');\n       }\n\n       /**\n        * [convertToObject description]\n        * @param  {Array<string>} arry [description]\n        * @param  {[type]}        obj   [description]\n        */\n       public static convertToObject(array: Array<string>, obj: Array<any>):void{\n          // for (file in obj) {\n          //     obj.push({\n          //       name : Markdocs.rmExtension(file),\n          //       path : file\n          //     });\n          // }\n       }\n\n\n      public static convertPathToCategory(file, lvl): string|boolean {\n\n          let arr = file.trim().split('/');\n\n          if (arr.length > lvl + 1)\n              return (arr[lvl]);\n\n          return false;\n      }\n\n\n       public static readMdFile(urlFile: string, action?:any):any{\n\n         let url = urlFile + ((/\\?/).test(urlFile) ? \"&\" : \"?\") + (new Date()).getTime();\n\n        //  request\n        //    .get(url)\n        //    .set(\"text/markdown; charset=UTF-8\")\n        //    .set(\"Cache-Control\", \"no-cache\")\n        //    .end(function(err, res){\n        //      if(err){\n        //        throw new Error('Il y a eu une erreur lors du chargement du fichier...');\n        //      }\n        //      else if(typeof action === 'function') {\n        //          action(res);\n        //      }\n        //    });\n\n       }\n\n\n  };\n","import {Markdocs} from './app'\n\n\nvar user = new Markdocs(\n  null,\n  {\n      mdFiles: [\n          'md/doc_markdocs.v1.md',\n          'md/samples.md'\n      ],\n  }\n);\n\n\ndocument.body.innerHTML =  `<h3>Hye ${user}</h3>`;\n","/*\n   Typescipt Underscore 1.4.2-0.9 (Browser Version)\n   (c) 2012 Álvaro Vilanova Vidal\n   Typescipt-Underscore may be freely distributed under the MIT license.\n */\n\ninterface UnderscoreVoidListIterator {\n    (element: any, index: number, list: any[]): void;\n}\n\ninterface UnderscoreMemoListIterator {\n    (memo: any, element: any, index: number, list: any[]): any;\n}\n\ninterface UnderscoreListIterator {\n    (element: any, index: number, list: any[]): any;\n}\n\ninterface UnderscoreVoidObjectIterator {\n    (element: any, key: any, object: any): void;\n}\n\ninterface UnderscoreMemoObjectIterator {\n    (memo: any, element: any, key: any, object: any): any;\n}\n\ninterface UnderscoreObjectIterator {\n    (element: any, key: any, object: any): any;\n}\n\ninterface UnderscorePredicate {\n    (value: any): boolean;\n}\n\ninterface UnderscoreIterator {\n    (value: any): any;\n}\n\ninterface UnderscoreTemplateSettings {\n    evaluate?: RegExp;\n    interpolate?: RegExp;\n    escape?: RegExp;\n}\n\n/* Interface for use underscore in functional (chain) style.\n   range, bindAll, dealy, defer, after, noConflict, times, random, mixin,\n   uniqueId, chain and template have been removed because they are not very\n   useful here.\n */\ninterface UnderscoreWrappedObject {\n    // Collection Functions (Arrays or Objects)\n    each(iterator: UnderscoreVoidListIterator, context?: any): UnderscoreWrappedObject;\n    each(iterator: UnderscoreVoidObjectIterator, context?: any): UnderscoreWrappedObject;\n    forEach(iterator: UnderscoreVoidListIterator, context?: any): UnderscoreWrappedObject;\n    forEach(iterator: UnderscoreVoidObjectIterator, context?: any): UnderscoreWrappedObject;\n\n    map(iterator: UnderscoreListIterator, context?: any): UnderscoreWrappedObject;\n    map(iterator: UnderscoreObjectIterator, context?: any): UnderscoreWrappedObject;\n    collect(iterator: UnderscoreListIterator, context?: any): UnderscoreWrappedObject;\n    collect(iterator: UnderscoreObjectIterator, context?: any): UnderscoreWrappedObject;\n\n    reduce(iterator: UnderscoreMemoListIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    reduce(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    inject(iterator: UnderscoreMemoListIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    inject(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    foldl(iterator: UnderscoreMemoListIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    foldl(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): UnderscoreWrappedObject;\n\n    reduceRight(iterator: UnderscoreMemoListIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    reduceRight(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    foldr(iterator: UnderscoreMemoListIterator, memo: any, context?: any): UnderscoreWrappedObject;\n    foldr(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): UnderscoreWrappedObject;\n\n    find(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n    detect(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n\n    filter(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n    select(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n\n    where(properties: any): UnderscoreWrappedObject;\n\n    reject(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n\n    all(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n    every(predicate: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n\n    any(predicate?: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n    some(predicate?: UnderscorePredicate, context?: any): UnderscoreWrappedObject;\n\n    contains(value: any): UnderscoreWrappedObject;\n    include(value: any): UnderscoreWrappedObject;\n\n    invoke(methodName: string, ...arguments: any[]): UnderscoreWrappedObject;\n\n    pluck(propertyName: string): UnderscoreWrappedObject;\n\n    max(iterator?: UnderscoreIterator, context?: any): UnderscoreWrappedObject;\n\n    min(iterator?: UnderscoreIterator, context?: any): UnderscoreWrappedObject;\n\n    sortBy(property?: string, context?: any): UnderscoreWrappedObject;\n    sortBy(iterator?: UnderscoreIterator, context?: any): UnderscoreWrappedObject;\n\n    groupBy(property: string): UnderscoreWrappedObject;\n    groupBy(iterator: UnderscoreIterator): UnderscoreWrappedObject;\n\n    countBy(property: string): UnderscoreWrappedObject;\n    countBy(iterator: UnderscoreIterator): UnderscoreWrappedObject;\n\n    shuffle(): UnderscoreWrappedObject;\n\n    toArray(): UnderscoreWrappedObject;\n\n    size(): UnderscoreWrappedObject;\n\n\n    // Array Functions\n    first(n?: number): UnderscoreWrappedObject;\n    head(n?: number): UnderscoreWrappedObject;\n    take(n?: number): UnderscoreWrappedObject;\n\n    initial(n?: number): UnderscoreWrappedObject;\n\n    last(n?: number): UnderscoreWrappedObject;\n\n    rest(index?: number): UnderscoreWrappedObject;\n    tail(index?: number): UnderscoreWrappedObject;\n    drop(index?: number): UnderscoreWrappedObject;\n\n    compact(): UnderscoreWrappedObject;\n\n    flatten(shallow?: boolean): UnderscoreWrappedObject;\n\n    without(...values: any[]): UnderscoreWrappedObject;\n\n    union(...arrays: any[][]): UnderscoreWrappedObject;\n\n    intersection(...arrays: any[][]): UnderscoreWrappedObject;\n\n    difference(...arrays: any[][]): UnderscoreWrappedObject;\n\n    uniq(isSorted?: boolean, UnderscoreIterator?: UnderscoreIterator): UnderscoreWrappedObject;\n    unique(isSorted?: boolean, UnderscoreIterator?: UnderscoreIterator): UnderscoreWrappedObject;\n\n    zip(...arrays: any[][]): UnderscoreWrappedObject;\n\n    object(value?: any): UnderscoreWrappedObject;\n\n    indexOf(value: any, isSorted?: boolean): UnderscoreWrappedObject;\n\n    lastIndexOf(value: any, fromIndex?: number): UnderscoreWrappedObject;\n\n    sortedIndex(value: any, UnderscoreIterator?: UnderscoreIterator): UnderscoreWrappedObject;\n\n\n    // Function (uh, ahem) Functions\n    bind(object: any, ...arguments: any[]): UnderscoreWrappedObject;\n\n    memoize(hashFunction?: (value: any) => any): UnderscoreWrappedObject;\n\n    delay(wait: number, ...arguments: any[]): UnderscoreWrappedObject;\n\n    defer(...arguments: any[]): UnderscoreWrappedObject;\n\n    throttle(wait: number): UnderscoreWrappedObject;\n\n    debounce(wait: number, immediate?: boolean): UnderscoreWrappedObject;\n\n    once(): UnderscoreWrappedObject;\n\n    after(fn: (...args: any[]) => any): UnderscoreWrappedObject;\n\n    wrap(wrapper: (...args: any[]) => any): UnderscoreWrappedObject;\n\n    compose(...fns: Function[]): UnderscoreWrappedObject;\n\n\n    // Object Functions\n    keys(): UnderscoreWrappedObject;\n\n    values(): UnderscoreWrappedObject;\n\n    pairs(): UnderscoreWrappedObject;\n\n    invert(): UnderscoreWrappedObject;\n\n    functions(): UnderscoreWrappedObject;\n    methods(): UnderscoreWrappedObject;\n\n    extend(...sources: any[]): UnderscoreWrappedObject;\n\n    pick(...keys: string[]): UnderscoreWrappedObject;\n\n    omit(...keys: string[]): UnderscoreWrappedObject;\n\n    defaults(...defaults: any[]): UnderscoreWrappedObject;\n\n    clone(): UnderscoreWrappedObject;\n\n    tap(interceptor: (...as: any[]) => any): UnderscoreWrappedObject;\n\n    has(key: any): UnderscoreWrappedObject;\n\n    isEqual(other: any): UnderscoreWrappedObject;\n\n    isEmpty(): UnderscoreWrappedObject;\n\n    isElement(): UnderscoreWrappedObject;\n\n    isArray(): UnderscoreWrappedObject;\n\n    isObject(): UnderscoreWrappedObject;\n\n    isArguments(): UnderscoreWrappedObject;\n\n    isFunction(): UnderscoreWrappedObject;\n\n    isString(): UnderscoreWrappedObject;\n\n    isNumber(): UnderscoreWrappedObject;\n\n    isFinite(): UnderscoreWrappedObject;\n\n    isbooleanean(): UnderscoreWrappedObject;\n\n    isDate(): UnderscoreWrappedObject;\n\n    isRegExp(): UnderscoreWrappedObject;\n\n    isNaN(): UnderscoreWrappedObject;\n\n    isNull(): UnderscoreWrappedObject;\n\n    isUndefined(): UnderscoreWrappedObject;\n\n\n    // Utility Functions\n    identity(): UnderscoreWrappedObject;\n\n    escape(): UnderscoreWrappedObject;\n\n    result(property: string): UnderscoreWrappedObject;\n\n    template(data?: any, settings?: any): (...as: any[]) => UnderscoreWrappedObject;\n\n    value(): any;\n}\n\n/* Interface that enables the use of underscore in a OO Style.\n   range, bindAll, dealy, defer, after, noConflict, times, random, mixin and\n   uniqueId have been removed because they are not very useful here.\n */\ninterface UnderscoreOOStatic {\n    // Collection Functions (Arrays or Objects)\n    each(iterator: UnderscoreVoidListIterator, context?: any): void;\n    each(iterator: UnderscoreVoidObjectIterator, context?: any): void;\n    forEach(iterator: UnderscoreVoidListIterator, context?: any): void;\n    forEach(iterator: UnderscoreVoidObjectIterator, context?: any): void;\n\n    map(iterator: UnderscoreListIterator, context?: any): any[];\n    map(iterator: UnderscoreObjectIterator, context?: any): any[];\n    collect(iterator: UnderscoreListIterator, context?: any): any[];\n    collect(iterator: UnderscoreObjectIterator, context?: any): any[];\n\n    reduce(iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    reduce(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n    inject(iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    inject(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n    foldl(iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    foldl(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n\n    reduceRight(iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    reduceRight(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n    foldr(iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    foldr(iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n\n    find(predicate: UnderscorePredicate, context?: any): any;\n    detect(predicate: UnderscorePredicate, context?: any): any;\n\n    filter(predicate: UnderscorePredicate, context?: any): any;\n    select(predicate: UnderscorePredicate, context?: any): any;\n\n    where(properties: any): any;\n\n    reject(predicate: UnderscorePredicate, context?: any): any;\n\n    all(predicate: UnderscorePredicate, context?: any): any;\n    every(predicate: UnderscorePredicate, context?: any): any;\n\n    any(predicate?: UnderscorePredicate, context?: any): any;\n    some(predicate?: UnderscorePredicate, context?: any): any;\n\n    contains(value: any): boolean;\n    include(value: any): boolean;\n\n    invoke(methodName: string, ...arguments: any[]): any;\n\n    pluck(propertyName: string): any;\n\n    max(iterator?: UnderscoreIterator, context?: any): any;\n\n    min(iterator?: UnderscoreIterator, context?: any): any;\n\n    sortBy(property?: string, context?: any): any;\n    sortBy(iterator?: UnderscoreIterator, context?: any): any;\n\n    groupBy(property: string): any;\n    groupBy(iterator: UnderscoreIterator): any;\n\n    countBy(property: string): any;\n    countBy(iterator: UnderscoreIterator): any;\n\n    shuffle(): any;\n\n    toArray(): any[];\n\n    size(): number;\n\n\n    // Array Functions\n    first(n?: number): any;\n    head(n?: number): any;\n    take(n?: number): any;\n\n    initial(n?: number): any[];\n\n    last(n?: number): any;\n\n    rest(index?: number): any[];\n    tail(index?: number): any[];\n    drop(index?: number): any[];\n\n    compact(): any[];\n\n    flatten(shallow?: boolean): any[];\n\n    without(...values: any[]): any[];\n\n    union(...arrays: any[][]): any[];\n\n    intersection(...arrays: any[][]): any[];\n\n    difference(...arrays: any[][]): any[];\n\n    uniq(isSorted?: boolean, UnderscoreIterator?: UnderscoreIterator): any[];\n    unique(isSorted?: boolean, UnderscoreIterator?: UnderscoreIterator): any[];\n\n    zip(...arrays: any[][]): any[];\n\n    object(value?: any): any;\n\n    indexOf(value: any, isSorted?: boolean): number;\n\n    lastIndexOf(value: any, fromIndex?: number): number;\n\n    sortedIndex(value: any, UnderscoreIterator?: UnderscoreIterator): any;\n\n\n    // Function (uh, ahem) Functions\n    bind(object: any, ...arguments: any[]): (...args: any[]) => any;\n\n    memoize(hashFunction?: (value: any) => any): (...args: any[]) => any;\n\n    delay(wait: number, ...arguments: any[]): void;\n\n    defer(...arguments: any[]): void;\n\n    throttle(wait: number): (...args: any[]) => any;\n\n    debounce(wait: number, immediate?: boolean): (...args: any[]) => any;\n\n    once(): (...args: any[]) => any;\n\n    after(fn: (...args: any[]) => any): (...args: any[]) => any;\n\n    wrap(wrapper: (...args: any[]) => any): (...args: any[]) => any;\n\n    compose(...fns: Function[]): (...args: any[]) => any;\n\n\n    // Object Functions\n    keys(): string[];\n\n    values(): any[];\n\n    pairs(): any[];\n\n    invert(): any;\n\n    functions(): string[];\n    methods(): string[];\n\n    extend(...sources: any[]): any;\n\n    pick(...keys: string[]): any;\n\n    omit(...keys: string[]): any;\n\n    defaults(...defaults: any[]): any;\n\n    clone(): any;\n\n    tap(interceptor: (...as: any[]) => any): any;\n\n    has(key: any): boolean;\n\n    isEqual(other: any): boolean;\n\n    isEmpty(): boolean;\n\n    isElement(): boolean;\n\n    isArray(): boolean;\n\n    isObject(): boolean;\n\n    isArguments(): boolean;\n\n    isFunction(): boolean;\n\n    isString(): boolean;\n\n    isNumber(): boolean;\n\n    isFinite(): boolean;\n\n    isbooleanean(): boolean;\n\n    isDate(): boolean;\n\n    isRegExp(): boolean;\n\n    isNaN(): boolean;\n\n    isNull(): boolean;\n\n    isUndefined(): boolean;\n\n\n    // Utility Functions\n    identity(): any;\n\n    escape(): string;\n\n    result(property: string): any;\n\n    template(data?: any, settings?: UnderscoreTemplateSettings): (...as: any[]) => string;\n\n    chain(): UnderscoreWrappedObject;\n}\n\ninterface UnderscoreStatic {\n    // OO-style\n    (arg: any): UnderscoreOOStatic;\n\n    // Collection Functions (Arrays or Objects)\n    each(list: any[], iterator: UnderscoreVoidListIterator, context?: any): void;\n    each(object: any, iterator: UnderscoreVoidObjectIterator, context?: any): void;\n    forEach(list: any[], iterator: UnderscoreVoidListIterator, context?: any): void;\n    forEach(object: any, iterator: UnderscoreVoidObjectIterator, context?: any): void;\n\n    map(list: any[], iterator: UnderscoreListIterator, context?: any): any[];\n    map(object: any, iterator: UnderscoreObjectIterator, context?: any): any[];\n    collect(list: any[], iterator: UnderscoreListIterator, context?: any): any[];\n    collect(object: any, iterator: UnderscoreObjectIterator, context?: any): any[];\n\n\n    reduce(list: any[], iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    reduce(list: any, iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n    inject(list: any[], iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    inject(list: any, iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n    foldl(list: any[], iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    foldl(list: any, iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n\n\n    reduceRight(list: any[], iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    reduceRight(list: any, iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n    foldr(list: any[], iterator: UnderscoreMemoListIterator, memo: any, context?: any): any;\n    foldr(list: any, iterator: UnderscoreMemoObjectIterator, memo: any, context?: any): any;\n\n    find(list: any, predicate: UnderscorePredicate, context?: any): any;\n    detect(list: any, predicate: UnderscorePredicate, context?: any): any;\n\n    filter(list: any, predicate: UnderscorePredicate, context?: any): any;\n    select(list: any, predicate: UnderscorePredicate, context?: any): any;\n\n    where(list: any, properties: any): any;\n\n    reject(list: any, predicate: UnderscorePredicate, context?: any): any;\n\n    all(list: any, predicate: UnderscorePredicate, context?: any): any;\n    every(list: any, predicate: UnderscorePredicate, context?: any): any;\n\n    any(list: any, predicate?: UnderscorePredicate, context?: any): any;\n    some(list: any, predicate?: UnderscorePredicate, context?: any): any;\n\n    contains(list: any, value: any): boolean;\n    include(list: any, value: any): boolean;\n\n    invoke(list: any, methodName: string, ...arguments: any[]): any;\n\n    pluck(list: any, propertyName: string): any;\n\n    max(list: any, UnderscoreIterator?: UnderscoreIterator, context?: any): any;\n\n    min(list: any, UnderscoreIterator?: UnderscoreIterator, context?: any): any;\n\n    sortBy(list: any, property?: string, context?: any): any;\n    sortBy(list: any, UnderscoreIterator?: UnderscoreIterator, context?: any): any;\n\n    groupBy(list: any, property: string): any;\n    groupBy(list: any, iterator: UnderscoreIterator): any;\n\n    countBy(list: any, iterator: UnderscoreIterator): any;\n\n    shuffle(list: any): any;\n\n    toArray(list: any): any[];\n\n    size(list: any): number;\n\n\n    // Array Functions\n\n    first(array: any[], n?: number): any;\n    head(array: any[], n?: number): any;\n    take(array: any[], n?: number): any;\n\n    initial(array: any[], n?: number): any[];\n\n    last(array: any[], n?: number): any;\n\n    rest(array: any[], index?: number): any[];\n    tail(array: any[], index?: number): any[];\n    drop(array: any[], index?: number): any[];\n\n    compact(array: any[]): any[];\n\n    flatten(array: any[], shallow?: boolean): any[];\n\n    without(array: any[], ...values: any[]): any[];\n\n    union(...arrays: any[][]): any[];\n\n    intersection(...arrays: any[][]): any[];\n\n    difference(...arrays: any[][]): any[];\n\n    uniq(array: any[], isSorted?: boolean, UnderscoreIterator?: UnderscoreIterator): any[];\n    unique(array: any[], isSorted?: boolean, UnderscoreIterator?: UnderscoreIterator): any[];\n\n    zip(...arrays: any[][]): any[];\n\n    object(list: any, value?: any): any;\n\n    indexOf(array: any[], value: any, isSorted?: boolean): number;\n\n    lastIndexOf(array: any[], value: any, fromIndex?: number): number;\n\n    sortedIndex(list: any, value: any, UnderscoreIterator?: UnderscoreIterator): any;\n\n    range(stop: number): number[];\n    range(start: number, stop: number, step?: number): number[];\n\n\n    // Function (uh, ahem) Functions\n\n    bind(fn: (...args: any[]) => any, object: any, ...arguments: any[]): (...args: any[]) => any;\n\n    bindAll(object: any, ...methodNames: string[]): void;\n\n    memoize(fn: (...args: any[]) => any, hashFunction?: (value: any) => any): (...args: any[]) => any;\n\n    delay(fn: (...args: any[]) => any, wait: number, ...arguments: any[]): void;\n\n    defer(fn: (...args: any[]) => any, ...arguments: any[]): void;\n\n    throttle(fn: (...args: any[]) => any, wait: number): (...args: any[]) => any;\n\n    debounce(fn: (...args: any[]) => any, wait: number, immediate?: boolean): (...args: any[]) => any;\n\n    once(fn: (...args: any[]) => any): (...args: any[]) => any;\n\n    after(count: number, fn: (...args: any[]) => any): (...args: any[]) => any;\n\n    wrap(fn: (...args: any[]) => any, wrapper: (...args: any[]) => any): (...args: any[]) => any;\n\n    compose(...fns: Function[]): (...args: any[]) => any;\n\n\n    // Object Functions\n\n    keys(object: any): string[];\n\n    values(object: any): any[];\n\n    pairs(object: any): any[];\n\n    invert(object: any): any;\n\n    functions(object: any): string[];\n    methods(object: any): string[];\n\n    extend(destination: any, ...sources: any[]): any;\n\n    pick(object: any, ...keys: string[]): any;\n\n    omit(object: any, ...keys: string[]): any;\n\n    defaults(object: any, ...defaults: any[]): any;\n\n    clone(object: any): any;\n\n    tap(object: any, interceptor: (...as: any[]) => any): any;\n\n    has(object: any, key: any): boolean;\n\n    isEqual(object: any, other: any): boolean;\n\n    isEmpty(object: any): boolean;\n\n    isElement(object: any): boolean;\n\n    isArray(object: any): boolean;\n\n    isObject(value: any): boolean;\n\n    isArguments(object: any): boolean;\n\n    isFunction(object: any): boolean;\n\n    isString(object: any): boolean;\n\n    isNumber(object: any): boolean;\n\n    isFinite(object: any): boolean;\n\n    isbooleanean(object: any): boolean;\n\n    isDate(object: any): boolean;\n\n    isRegExp(object: any): boolean;\n\n    isNaN(object: any): boolean;\n\n    isNull(object: any): boolean;\n\n    isUndefined(object: any): boolean;\n\n\n    // Utility Functions\n\n    noConflict(): any;\n\n    identity(value: any): any;\n\n    times(n: number, iterator: (index: number) => void, context?: any): void;\n\n    random(min: number, max: number): number;\n\n    mixin(object: any): void;\n\n    uniqueId(prefix?: string): any;\n\n    escape(str: string): string;\n\n    result(object: any, property: string): any;\n\n    template(templateString: string, data?: any, settings?: UnderscoreTemplateSettings): (...as: any[]) => string;\n    templateSettings: UnderscoreTemplateSettings;\n\n    chain(object: any): UnderscoreWrappedObject;\n}\n\ndeclare var _: UnderscoreStatic;\n"]}